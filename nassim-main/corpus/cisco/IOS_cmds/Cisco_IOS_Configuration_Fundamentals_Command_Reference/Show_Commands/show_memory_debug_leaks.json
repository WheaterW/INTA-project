{
    "From": " Cisco IOS Configuration Fundamentals Command Reference",
    "PageTitle": "show memory debug leaks",
    "FuncDef": [
        "To display detected memory leaks, use the **show memory debug leaks** command in privileged EXEC mode. "
    ],
    "CLIs": [
        "show memory debug leaks [ chunks | largest | lowmem | summary ]",
        "Cisco Catalyst 4500e Series Switches running IOS XE software",
        "show memory debug leak"
    ],
    "ParentView": [
        null
    ],
    "ParaDef": [
        {
            "Parameters": " **chunks** ",
            "Info": " (Optional) Displays the memory leaks in chunks. "
        },
        {
            "Parameters": " **largest** ",
            "Info": " (Optional) Displays the top ten leaking allocator_pcs based on size, and the total amount of memory they have leaked. "
        },
        {
            "Parameters": " **lowmem** ",
            "Info": " (Optional) Forces the memory leak detector to work in low memory mode, making no memory allocations. "
        },
        {
            "Parameters": " **summary** ",
            "Info": " (Optional) Reports summarized memory leaks based on allocator_pc and size of the memory block. "
        }
    ],
    "Examples": [
        [
            "Example output varies between Cisco IOS software images and Cisco IOS Software Modularity software images. To view the appropriate output, choose one of the following sections:",
            "•! [ ] (/c/dam/en/us/td/i/templates/blank.gif) [ Cisco IOS Software ] (#wp1571400)",
            "•! [ ] (/c/dam/en/us/td/i/templates/blank.gif) [ Cisco Catalyst 4500e Series Switches running IOS XE software ] (#wp1571677)",
            "Cisco IOS Software",
            "show memory debug leaks Command Example",
            "The following example shows output from the show memory debug leaks command:",
            "```",
            "Router# show memory debug leaks",
            "```",
            "```",
            "```",
            "```",
            "Adding blocks for GD...",
            "```",
            "```",
            "```",
            "```",
            "PCI memory",
            "```",
            "```",
            "Address Size Alloc_pc PID Name",
            "```",
            "```",
            "```",
            "```",
            "I/O memory",
            "```",
            "```",
            "Address Size Alloc_pc PID Name",
            "```",
            "```",
            "```",
            "```",
            "Processor memory",
            "```",
            "```",
            "Address Size Alloc_pc PID Name",
            "```",
            "```",
            "62DABD28 80 60616750 -2 Init",
            "```",
            "```",
            "62DABD78 80 606167A0 -2 Init",
            "```",
            "```",
            "62DCF240 88 605B7E70 -2 Init",
            "```",
            "```",
            "62DCF298 96 605B7E98 -2 Init",
            "```",
            "```",
            "62DCF2F8 88 605B7EB4 -2 Init",
            "```",
            "```",
            "62DCF350 96 605B7EDC -2 Init",
            "```",
            "```",
            "63336C28 104 60C67D74 -2 Init",
            "```",
            "```",
            "63370D58 96 60C656AC -2 Init",
            "```",
            "```",
            "633710A0 304 60C656AC -2 Init",
            "```",
            "```",
            "63B2BF68 96 60C659D4 -2 Init",
            "```",
            "```",
            "63BA3FE0 32832 608D2848 104 Audit Process",
            "```",
            "```",
            "63BB4020 32832 608D2FD8 104 Audit Process",
            "```",
            "```",
            "```",
            "[ Table 109 ] (#wp1571437) describes the significant fields shown in the display.",
            "Table 109 show memory debug leaks Field Descriptions",
            "| Field | Description |",
            "| --- | --- |",
            "| Address | Hexadecimal address of the leaked block. |",
            "| Size | Size of the leaked block (in bytes). |",
            "| Alloc_pc | Address of the system call that allocated the block. |",
            "| PID | The process identifier of the process that allocated the block. |",
            "| Name | The name of the process that allocated the block. |",
            "show memory debug leaks chunks Command Example",
            "The following example shows output from the show memory debug leaks chunks command:",
            "```",
            "Router# show memory debug leaks chunks",
            "```",
            "```",
            "```",
            "```",
            "Adding blocks for GD...",
            "```",
            "```",
            "```",
            "```",
            "PCI memory",
            "```",
            "```",
            "Address Size Alloc_pc PID Name",
            "```",
            "```",
            "```",
            "```",
            "Chunk Elements:",
            "```",
            "```",
            "Address Size Parent Name",
            "```",
            "```",
            "```",
            "```",
            "I/O memory",
            "```",
            "```",
            "Address Size Alloc_pc PID Name",
            "```",
            "```",
            "```",
            "```",
            "Chunk Elements:",
            "```",
            "```",
            "Address Size Parent Name",
            "```",
            "```",
            "```",
            "```",
            "Processor memory",
            "```",
            "```",
            "Address Size Alloc_pc PID Name",
            "```",
            "```",
            "62DABD28 80 60616750 -2 Init",
            "```",
            "```",
            "62DABD78 80 606167A0 -2 Init",
            "```",
            "```",
            "62DCF240 88 605B7E70 -2 Init",
            "```",
            "```",
            "62DCF298 96 605B7E98 -2 Init",
            "```",
            "```",
            "62DCF2F8 88 605B7EB4 -2 Init",
            "```",
            "```",
            "62DCF350 96 605B7EDC -2 Init",
            "```",
            "```",
            "63336C28 104 60C67D74 -2 Init",
            "```",
            "```",
            "63370D58 96 60C656AC -2 Init",
            "```",
            "```",
            "633710A0 304 60C656AC -2 Init",
            "```",
            "```",
            "63B2BF68 96 60C659D4 -2 Init",
            "```",
            "```",
            "63BA3FE0 32832 608D2848 104 Audit Process",
            "```",
            "```",
            "63BB4020 32832 608D2FD8 104 Audit Process",
            "```",
            "```",
            "```",
            "```",
            "Chunk Elements:",
            "```",
            "```",
            "Address Size Parent Name",
            "```",
            "```",
            "62D80DA8 16 62D7BFD0 (Managed Chunk )",
            "```",
            "```",
            "62D80DB8 16 62D7BFD0 (Managed Chunk )",
            "```",
            "```",
            "62D80DC8 16 62D7BFD0 (Managed Chunk )",
            "```",
            "```",
            "62D80DD8 16 62D7BFD0 (Managed Chunk )",
            "```",
            "```",
            "62D80DE8 16 62D7BFD0 (Managed Chunk )",
            "```",
            "```",
            "62E8FD60 216 62E8F888 (IPC Message He)",
            "```",
            "```",
            "```",
            "[ Table 110 ] (#wp1571517) describes the significant fields shown in the display.",
            "Table 110 show memory debug leaks chunks Field Descriptions",
            "| Field | Description |",
            "| --- | --- |",
            "| Address | Hexadecimal address of the leaked block. |",
            "| Size | Size of the leaked block (in bytes). |",
            "| Alloc_pc | Address of the system call that allocated the block. |",
            "| PID | The process identifier of the process that allocated the block. |",
            "| Name | The name of the process that allocated the block. |",
            "| Size | (Chunk Elements) Size of the leaked element (bytes). |",
            "| Parent | (Chunk Elements) Parent chunk of the leaked chunk. |",
            "| Name | (Chunk Elements) The name of the leaked chunk. |",
            "show memory debug leaks largest Command Example",
            "The following example shows output from the show memory debug leaks largest command:",
            "```",
            "Router# show memory debug leaks largest",
            "```",
            "```",
            "```",
            "```",
            "Adding blocks for GD...",
            "```",
            "```",
            "```",
            "```",
            "PCI memory",
            "```",
            "```",
            "Alloc_pc total leak size",
            "```",
            "```",
            "```",
            "```",
            "I/O memory",
            "```",
            "```",
            "Alloc_pc total leak size",
            "```",
            "```",
            "```",
            "```",
            "Processor memory",
            "```",
            "```",
            "Alloc_pc total leak size",
            "```",
            "```",
            "608D2848 32776 inconclusive",
            "```",
            "```",
            "608D2FD8 32776 inconclusive",
            "```",
            "```",
            "60C656AC 288 inconclusive",
            "```",
            "```",
            "60C67D74 48 inconclusive",
            "```",
            "```",
            "605B7E98 40 inconclusive",
            "```",
            "```",
            "605B7EDC 40 inconclusive",
            "```",
            "```",
            "60C659D4 40 inconclusive",
            "```",
            "```",
            "605B7E70 32 inconclusive",
            "```",
            "```",
            "605B7EB4 32 inconclusive",
            "```",
            "```",
            "60616750 24 inconclusive",
            "```",
            "```",
            "```",
            "The following example shows output from the second invocation of the show memory debug leaks largest command:",
            "```",
            "Router# show memory debug leaks largest",
            "```",
            "```",
            "```",
            "```",
            "Adding blocks for GD...",
            "```",
            "```",
            "```",
            "```",
            "PCI memory",
            "```",
            "```",
            "Alloc_pc total leak size",
            "```",
            "```",
            "```",
            "```",
            "I/O memory",
            "```",
            "```",
            "Alloc_pc total leak size",
            "```",
            "```",
            "```",
            "```",
            "Processor memory",
            "```",
            "```",
            "Alloc_pc total leak size",
            "```",
            "```",
            "608D2848 32776",
            "```",
            "```",
            "608D2FD8 32776",
            "```",
            "```",
            "60C656AC 288",
            "```",
            "```",
            "60C67D74 48",
            "```",
            "```",
            "605B7E98 40",
            "```",
            "```",
            "605B7EDC 40",
            "```",
            "```",
            "60C659D4 40",
            "```",
            "```",
            "605B7E70 32",
            "```",
            "```",
            "605B7EB4 32",
            "```",
            "```",
            "60616750 24",
            "```",
            "```",
            "```",
            "show memory debug leaks summary Command Example",
            "The following example shows output from the show memory debug leaks summary command:",
            "```",
            "Router# show memory debug leaks summary",
            "```",
            "```",
            "```",
            "```",
            "Adding blocks for GD...",
            "```",
            "```",
            "```",
            "```",
            "PCI memory",
            "```",
            "```",
            "```",
            "```",
            "Alloc PC Size Blocks Bytes What",
            "```",
            "```",
            "```",
            "```",
            "I/O memory",
            "```",
            "```",
            "```",
            "```",
            "Alloc PC Size Blocks Bytes What",
            "```",
            "```",
            "```",
            "```",
            "Processor memory",
            "```",
            "```",
            "```",
            "```",
            "Alloc PC Size Blocks Bytes What",
            "```",
            "```",
            "```",
            "```",
            "0x605B7E70 0000000032 0000000001 0000000032 Init",
            "```",
            "```",
            "0x605B7E98 0000000040 0000000001 0000000040 Init",
            "```",
            "```",
            "0x605B7EB4 0000000032 0000000001 0000000032 Init",
            "```",
            "```",
            "0x605B7EDC 0000000040 0000000001 0000000040 Init",
            "```",
            "```",
            "0x60616750 0000000024 0000000001 0000000024 Init",
            "```",
            "```",
            "0x606167A0 0000000024 0000000001 0000000024 Init",
            "```",
            "```",
            "0x608D2848 0000032776 0000000001 0000032776 Audit Process",
            "```",
            "```",
            "0x608D2FD8 0000032776 0000000001 0000032776 Audit Process",
            "```",
            "```",
            "0x60C656AC 0000000040 0000000001 0000000040 Init",
            "```",
            "```",
            "0x60C656AC 0000000248 0000000001 0000000248 Init",
            "```",
            "```",
            "0x60C659D4 0000000040 0000000001 0000000040 Init",
            "```",
            "```",
            "0x60C67D74 0000000048 0000000001 0000000048 Init",
            "```",
            "```",
            "```",
            "[ Table 111 ] (#wp1571647) describes the significant fields shown in the display.",
            "Table 111 show memory debug leaks summary Field Descriptions",
            "| Field | Description |",
            "| --- | --- |",
            "| Alloc_pc | Address of the system call that allocated the block. |",
            "| Size | Size of the leaked block. |",
            "| Blocks | Number of blocks leaked. |",
            "| Bytes | Total amount of memory leaked. |",
            "| What | Name of the process that owns the block. |",
            "Cisco Catalyst 4500e Series Switches running IOS XE software",
            "show memory debug leaks summary Command Example",
            "The following example shows output from the show memory debug leak command on command on a Cisco Catalyst 4500e switch, using a Cisco IOS image from Cisco IOS XE Release 3.1.0.SG and later releases:",
            "```",
            "Switch#show memory debug leak",
            "```",
            "```",
            "System memory : 1943928K total, 735154K used, 1208774K free, 153224K kernel reserved",
            "```",
            "```",
            "Lowest(b) : 641564672",
            "```",
            "```",
            "```",
            "```",
            "Process iosd, type L, PID = 10319",
            "```",
            "```",
            "1012856K total, 67716K text, 798420K data, 84K stack, 252K dynamic",
            "```",
            "```",
            "252 heapsize, 252 allocated, 0 free",
            "```",
            "```",
            "```",
            "```",
            "Adding blocks for GD...",
            "```",
            "```",
            "```",
            "```",
            "Leak(b) PID Name",
            "```",
            "```",
            "368 10319 iosd",
            "```",
            "```",
            "```",
            "```",
            "Switch#",
            "```",
            "```",
            "```",
            "[ Table 111 ] (#wp1571647) describes the significant fields shown in the display.",
            "Table 112 show memory debug leaks summary Field Descriptions",
            "| Field | Description |",
            "| --- | --- |",
            "| Leak | Size of the leaked block. |",
            "| PID | The process identifier of the process that allocated the block. |",
            "| Name | Name of the process that owns the block. |"
        ]
    ],
    "ExtraInfo": "If no optional keywords are specified, the **show memory debug leaks** command invokes normal mode memory leak detection and does not look for memory leaks in chunks.The **show memory debug leaks chunks** command invokes normal mode memory leak detection and looks for leaks in chunks as well.The **show memory debug leaks largest** command displays the top ten leaking allocator\\_pcs and the total amount of memory that they have leaked. Additionally, each time this command is invoked it remembers the previous invocation's report and compares it to the current invocation's report. If there are new entries in the current report they are tagged as \"inconclusive.\" If the same entry appears in the previous invocation's report and the current invocation's report, the inconclusive tag is not added. It would be beneficial to run memory leak detection more than once and to consider only the consistently reported leaks.The **show memory debug leaks lowmem** command forces memory leak detection to work in low memory mode. The amount of time taken for analysis is considerably greater than that of normal mode. The output for this command is similar to the **show memory debug leaks** command. You can use this command when you already know that normal mode memory leak detection will fail (perhaps by an unsuccessful previous attempt to invoke normal mode memory leak detection).The **show memory debug leaks summary** command reports memory leaks based on allocator\\_pc and then on the size of the block.![](/c/dam/en/us/td/i/templates/note.gif)---**Note** ![](/c/dam/en/us/td/i/templates/blank.gif)All show memory debug commands must be used on customer networks only to diagnose the router for memory leaks when memory depletion is observed. These CLI's will have high CPU utilization and might result in time sensitive protocols to flap. These CLI's are recommended for customer use, only in the maintenance window when the router is not in a scaled condition.---![](/c/dam/en/us/td/i/templates/note.gif)---**Note** ![](/c/dam/en/us/td/i/templates/blank.gif)All memory leak detection commands invoke normal mode memory leak detection, except when the low memory option is specifically invoked by use of the **lowmem** keyword. In normal mode, if memory leak detection determines that there is insufficient memory to proceed in normal mode, it will display an appropriate message and switch to low memory mode.---",
    "RelatedCmds": [
        {
            "cmd": " **set memory debug incremental starting-time** ",
            "description": " Sets the current time as the starting time for incremental analysis. "
        },
        {
            "cmd": " **show memory debug incremental allocation** ",
            "description": " Displays all memory blocks that were allocated after the issue of the **set memory debug incremental starting-time** command. "
        },
        {
            "cmd": " **show memory debug incremental leaks** ",
            "description": " Displays only memory that was leaked after the issue of the **set memory debug incremental starting-time** command. "
        },
        {
            "cmd": " **show memory debug incremental leaks lowmem** ",
            "description": " Forces incremental memory leak detection to work in low memory mode. Displays only memory that was leaked after the issue of the **set memory debug incremental starting-time** command. "
        },
        {
            "cmd": " **show memory debug incremental status** ",
            "description": " Displays if the starting point of incremental analysis has been defined and the time elapsed since then. "
        }
    ]
}